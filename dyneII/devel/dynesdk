#!/bin/sh
#
# dyne:bolic software development kit - the commandline tool
#
# Copyright (C) 2003-2005 Denis "Jaromil" Rojo <jaromil@dyne.org>
#                    Alex "Smilzo" Gnoli    <smilzo@sfrajone.org>
#                    Pierluigi "Newmark" Maori <newmark@dyne.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published 
# by the Free Software Foundation; either version 2 of the License,
# or (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

if [ -r /lib/dyne/utils.sh ]; then
  source /lib/dyne/utils.sh
else
  # standard output message routines
  # it's always useful to wrap them, in case we change behaviour later
  notice() { echo "[*] $1"; }
  act() { echo " .  $1"; }
  error() { echo "[!] $1"; }
fi
func() { if [ $DEBUG ]; then echo "[D] $1"; fi }

source /lib/dyne/modules.sh

PACKAGE="dyne:bolic SDK"
VERSION="2.0"
ISO="dyneII-dev.iso"
if [ -z $DYNESDK ]; then
  PFX="$DYNE_SYS_MNT/dyne/SDK" # you can change it to static path where dynesdk resides
else
  PFX=${DYNESDK}
fi

notice "$PACKAGE version $VERSION - software development kit"
act "Copyleft 2003-2005 by jaromil - RASTASOFT"

if ! [ -x /lib/dyne ]; then
  error "dyne shell libraries are not present on this system"
  error "can't run the dynesdk, use it inside dyne:II"
  exit 0
fi

OPTS=`getopt -o hvp:u:r:i:s:m:q -n 'dynesdk' -- "$@"`

#eval set -- "$OPTS"

while true; do
    case "$1" in
	-h)
	    notice "SYNOPSIS: dynesdk [-hv] [-p prefix] [-u user -h host] COMMAND"
	    act "-h     print this help"
	    act "-v     print out the version of this tool"
	    act "-p     path to the SDK directory (default $DYNE_SYS_MNT/dyne/SDK)"
            act "-m     additional modules to add in ramdisk"
            act "-q     be quick and skip checksums and crypto sigs"

            notice "MODULE DEVELOPMENT COMMANDS:"
	    act "mksdk      create an SDK environment inside the harddisk dock"
            act "mount      re/mount all SDK/modules in /opt"
	    act "squash     packs all the add-on modules into the SDK/cdrom"
	    act "mkiso      packs the SDK/cdrom directory into a bootable iso"
            
	    notice "CORE DEVELOPMENT COMMANDS:"
	    act "mkinitrd   packs the initrd.gz into the SDK/cdrom"
	    act "mkusr      packs the dyne.sys in the SDK/cdrom"

	    echo; exit 2 ;;
	-v) exit 2 ;;
	-p) PFX=$2; shift 2 ;;
	-m) ADD_RAMDISK_MODULES=$2; shift 2 ;;
        -q) QUICK="yes"; shift 1 ;;
	--) shift; break ;;
	*)  CMD=$1; shift 1; break ;;
    esac
done

# function to check for required software
check_sw() {
    func "checking existance of $1"
    CHECK_SW="`which $1`"
    if [ -z $CHECK_SW ]; then
	error "$1 not found"
	RET=0
    else
	func "$1 found in $CHECK_SW"
	RET=$CHECK_SW
    fi
}

if [ "`whoami`" != root ]; then
    error "you must be ROOT on your machine to use the dyne SDK"
    exit 0
fi

if [ -z "$DYNE_SYS_MEDIA" ]; then
    error "it doesn't seems you are running dyne"
    error "in case you are, please set /boot/dynenv accordingly"
    exit 0
fi

if [ $DYNE_SYS_MEDIA = cdrom ]; then
    error "running from CDROM: you need to DOCK your system"
    error "copy the dyne/ directory into your harddisk"
    exit 0
fi

if ! [ -x $DYNE_SYS_MNT/dyne ]; then
    error "no dyne/ system directory found in ${DYNE_SYS_MNT}"
    error "please correct your DYNE environmental variables"
    error "this doesn't seems an usual dock, uh?"
    exit 0
fi

if [ "$CMD" != "mksdk" ]; then
  if ! [ -x $PFX/cdrom ]; then
    error "no dyne/SDK/cdrom directory found in ${PFX}/cdrom"
    error "you need to run 'dynesdk mksdk' first or fetch a cdrom skeleton"
    exit 0
  fi
fi
	
# if those are missing, the iso can't be packed
if [ -z $MKISOFS ]; then
    check_sw "mkisofs";
    if [ $RET ]; then MKISOFS=$RET; fi
fi
if [ -z $MKSQUASHFS ]; then
    check_sw "mksquashfs";
    if [ $RET ]; then MKSQUASHFS=$RET; fi
fi


########################################################################
### COMMAND FUNCTIONS
########################################################################

mksdk() {
  
  source $DYNE_SYS_MNT/dyne/VERSION
  notice "creating SDK inside $DYNE_SYS_MNT/dyne"
  act "version: sys $DYNE_SYS_VER - initrd $DYNE_INITRD_VER"
      
  mkdir -p ${PFX}
  cd ${PFX}

  act "downloading dyne:II liveCD skeleton files from online repository"
  if ! [ -x startup ]; then
    svn co svn://code.dyne.org/dynebolic/dyneII/startup
  fi
  if ! [ -x cdrom ]; then
    svn co svn://code.dyne.org/dynebolic/dyneII/cdrom
  fi
  if ! [ -x devel ]; then
    svn co svn://code.dyne.org/dynebolic/dyneII/devel
  fi


  act "I can uncompress dyne.sys, it will occupy approx 2Gb"
  act "this way your /usr will become writable."
  act "You should do it only if you really need: it will make"
  act "it harder to merge your modifications with upgrades to"
  act "the main dyne core."
  echo "[?] do you want to uncompress the dyne.sys (y/N) ?"
  ask_yesno 10
  if [ $? = 1 ]; then
    mkdir tmp
    mkdir sys
    act "uncompressing usr binaries from ${DYNE_SYS_MNT}/dyne/dyne.sys"
    act "please wait, this operation requires long time..."
    mount -o loop ${DYNE_SYS_MNT}/dyne/dyne.sys tmp
    cp -rau tmp/* sys/
    umount tmp
    rm -r tmp
  fi

  act "I can download the kernel sources, it will occupy approx 100MB"
  act "this way you will be able to recompile the dyne:II kernel."
  act "You should do it only if you really need: compiling a kernel"
  act "requires deep knowledge of Linux and in case you do anything"
  act "wrong it might break your system."
  echo "[?] do you want to download the dyne:II kernel sources (y/N) ?"
  ask_yesno 10
  if [ $? = 1 ]; then
    act "downloading dyne:II kernel source and modules"
    rsync -P -r rsync.dyne.org::dynebolic-dev-anon/dyneII/kernel/ kernel
  fi

  cd - > /dev/null

  notice "the SDK has been succesfully created!"
  echo
  act "if you need instructions, please refer to the online documentation"
  act "available at http://dev.dynebolic.org"
  act "happy hacking! ;)"
  echo
  
}

mountmods() {
    mount_sdk_modules
}

squash() {
    notice "compressing the modules in the cdrom"
    if ! [ -x ${PFX}/modules ]; then
	error "nothing in SDK/modules - are you really developing a module?"
	exit -1
    fi

    if [ $1 ]; then
        MOD=$1

        if ! [ -r ${PFX}/modules/${MOD} ]; then
            error "module ${MOD} doesn't exists in SDK"
            exit -1
        fi

        if ! [ -r ${PFX}/modules/${MOD}/VERSION ]; then
	    error "module ${MOD} misses VERSION information: skipped"
            exit -1
        fi
	
	act "compressing ${PFX}/cdrom/dyne/modules/${MOD}"
	act "please wait, this may take a while..."

	mkdir -p ${PFX}/cdrom/dyne/modules

	if [ -r ${PFX}/cdrom/dyne/modules/${MOD}.dyne ]; then
	  rm ${PFX}/cdrom/dyne/modules/${MOD}.dyne
	fi

	$MKSQUASHFS ${PFX}/modules/${MOD} \
                    ${PFX}/cdrom/dyne/modules/${MOD}.dyne
	chmod a+r   ${PFX}/cdrom/dyne/modules/${MOD}.dyne
        chmod -x    ${PFX}/cdrom/dyne/modules/${MOD}.dyne

	act "done with ${MOD}"
        act "copy the module into your current dock to activate it:"
        act "cp ${PFX}/cdrom/dyne/modules/${MOD}.dyne $DYNE_SYS_MNT/dyne/modules"

        return
    fi


    for mod in `ls --color=none ${PFX}/modules`; do

	if ! [ -r ${PFX}/modules/${mod}/VERSION ]; then
	    error "module ${mod} misses VERSION information: skipped"
	    continue
	fi
	
	act "compressing ${PFX}/cdrom/dyne/modules/${mod}"
	act "please wait, this may take a while..."

	mkdir -p ${PFX}/cdrom/dyne/modules

	if [ -r ${PFX}/cdrom/dyne/modules/${mod}.dyne ]; then
	  rm ${PFX}/cdrom/dyne/modules/${mod}.dyne
	fi

	$MKSQUASHFS ${PFX}/modules/${mod} \
                    ${PFX}/cdrom/dyne/modules/${mod}.dyne
	chmod a+r   ${PFX}/cdrom/dyne/modules/${mod}.dyne
        chmod -x    ${PFX}/cdrom/dyne/modules/${mod}.dyne


	act "done with ${mod}"
	echo

    done

    chmod -x  $PFX/cdrom/dyne/modules/*.dyne
    chmod a+r $PFX/cdrom/dyne/modules/*.dyne

    act "modules were succesfully compressed in ${PFX}/cdrom/dyne/modules"
    ls -lh $PFX/cdrom/dyne/modules/*.dyne
}



mkinitrd() {
    notice "making the initrd compressed filesystem"

    # cleanup if needed
    if [ -x $PFX/initrd ]; then
        rm -rf $PFX/initrd
    fi
  
    mkdir -p $PFX/initrd
    cd $PFX/initrd

    act "creating the ramdisk filesystem"
    cp -ra /etc .
    cp -ra /lib .
    cp -ra /bin .
    cp -ra /sbin .
    mkdir -p boot dev proc rem root sys usr mnt home
    ln -s /usr usr/share
    ln -s /etc/terminfo usr/terminfo
    mknod dev/console c 5 1
    mkdir dev/pts
    echo "# Ramdisk version $DYNE_INITRD_VER" > boot/dynenv

    act "cleaning up configs and logs"
    rm -f etc/X11/XF86Config
    rm -f etc/X11/xorg.conf
    rm -f etc/HOSTNAME etc/NETWORK
    rm -f etc/auto.removable
    rm -f etc/blkid.tab*
    rm -f etc/zsh/*
    touch etc/zsh/modules
    rm -f etc/fstab
    rm -f etc/mtab
    cat << EOF > etc/fstab
# /etc/fstab: file system information, see man fstab
# on dyne this file is generated at runtime while booting
#
# <file system>	<mount point>   <type>  <options>       <dump>  <pass>
/dev/ramdisk	/		ext2	defaults	0	0
devpts		/dev/pts	devpts	defaults	0	0
proc            /proc           proc    defaults	0	0
sysfs		/sys		sysfs	defaults	0	0
usbfs		/proc/bus/usb	usbfs	defaults	0	0
EOF

    act "packaging /var"
    cp -ra /var .
    mkdir -p var/log/hotplug var/log/login var/log/setup
    mkdir -p var/cache/samba var/cache/union
    mkdir -p var/local var/cache var/lock var/tmp
    mkdir -p var/run var/log var/lib/rpm
    rm -rf var/local/*
    rm -rf var/cache/*
    rm -rf var/lock/*
    rm -rf var/tmp/*
    rm -rf var/run/*
    rm -rf var/log/*
    rm -rf var/lib/rpm/*
  
    if [ -x $PFX/startup/.svn ]; then
	act "setup startup files from subversion repository"
	cp -vf $PFX/startup/rc.*     etc/
	cp -vf $PFX/startup/zshenv   etc/
	cp -vf $PFX/startup/inittab  etc/
        mkdir -p lib/dyne/zsh
        mkdir -p lib/dyne/hotplug
	for f in `ls $PFX/startup/lib/`; do
	  cp -ravf ${PFX}/startup/lib/${f}      lib/dyne/
	done
	for f in `ls $PFX/startup/zsh/`; do
	  cp -avf ${PFX}/startup/zsh/${f}       lib/dyne/zsh/
	done
        for dir in `ls $PFX/startup/hotplug/`; do
          mkdir -p lib/dyne/hotplug/${dir}
          for f in `ls $PFX/startup/hotplug/${dir}/`; do
            cp -avf ${PFX}/startup/hotplug/${dir}/${f} lib/dyne/hotplug/${dir}/ 
          done
        done

        # delete all backup files
        for f in `find lib/dyne -name '*~'`; do
          rm ${f}
        done
    fi

    if [ -r /etc/rc.local ]; then
	act "including /etc/rc.local startup settings"
	cp -vf /etc/rc.local etc/
    fi

    ######## KERNEL MODULES

    if [ -z $KRN ]; then KRN=`uname -r`; fi

    if [ -x /mnt/usr/lib/modules ]; then
      MODDIR=/mnt/usr/lib/modules
    else MODDIR=/usr/lib/modules; fi

    act "setup boot kernel modules for ${KRN}"
    mkdir -p boot/modules/${KRN}
    for m in `iterate $SUPPORTED_FS`; do
	M=`find ${MODDIR}/${KRN}/ -name "${m}.ko"`
        if [ ${M} ]; then
	  cp -v ${M} boot/modules/${KRN}/
          bzip2 -9 boot/modules/${KRN}/${m}.ko
        else
          error "module ${m} not found in ${MODDIR}/${KRN}/"
        fi
    done
    # also the samba and usb-storage modules
    cp -v `find ${MODDIR}/${KRN}/ -name "smbfs.ko"` boot/modules/${KRN}/
    bzip2 -9 boot/modules/${KRN}/smbfs.ko
    cp -v `find ${MODDIR}/${KRN}/ -name "usb-storage.ko"` boot/modules/${KRN}/
    bzip2 -9 boot/modules/${KRN}/usb-storage.ko
    
    # copy any additional module specified on commandline
    if [ $ADD_RAMDISK_MODULES ]; then
      act "adding extra modules selected on commandline"
      for m in `iterate $ADD_RAMDISK_MODULES`; do
    	  M=`find ${MODDIR}/${KRN}/ -name "${m}.ko"`
	  if [ -r ${M} ]; then
	    cp -vu ${M} boot/modules/${KRN}/
	  else
	    error "module ${m} not found"
          fi
      done
    fi

    cd - > /dev/null
    cd $PFX
	     
    act "generate device file"
    dd if=/dev/zero of=cdrom/dyne/initrd bs=1k count=9000
    act "formatting ramdisk filesystem"
    mke2fs -m 0 -i 1024 cdrom/dyne/initrd
    act "populating ramdisk static file"
    mkdir -p tmp

    mount -o loop,rw cdrom/dyne/initrd tmp
    if [ $? != 0 ]; then
      error "mount of initrd filesystem failed, aborting"
      return
    fi

    cp -ra initrd/* tmp
    rm -r tmp/lost+found
    umount tmp
    rm -r tmp
    rm -rf initrd

    act "tuning filesystem"
    tune2fs -c 0 -i 0 cdrom/dyne/initrd
    rm -f cdrom/dyne/initrd.gz
    gzip -9 cdrom/dyne/initrd
    act "`stat cdrom/dyne/initrd.gz`"
    cd - > /dev/null
    sync
}

mkusr() {
    notice "preparing the /usr squashed filesystem"

    # copy the current dynesdk inside the new system
    cp -v $PFX/devel/dynesdk /usr/sbin/dynesdk

    echo "[?] would you like to update the PCI database (y/N) ?"
    ask_yesno 10
    if [ $? = 1 ]; then
      mv /usr/share/pci.ids /usr/share/pci.ids.old
      wget -O - http://pci-ids.ucw.cz/pci.ids.bz2 | bunzip2 > /usr/share/pci.ids
      if [ -r /usr/share/pci.ids ]; then
	rm /usr/share/pci.ids.old
      else
        error "operation failed. you need to be online to do that!"
	mv /usr/share/pci.ids.old /usr/share/pci.ids
      fi
    fi

    act "start compressing: `date`"
    act "(please wait, takes long!)"
    if [ -r $PFX/cdrom/dyne/dyne.sys ]; then
      rm $PFX/cdrom/dyne/dyne.sys
    fi
    $MKSQUASHFS /usr $PFX/cdrom/dyne/dyne.sys
    chmod a+r $PFX/cdrom/dyne/dyne.sys
    chmod -x  $PFX/cdrom/dyne/dyne.sys
    act "end: `date`"
    act "`stat $PFX/cdrom/dyne/dyne.sys`"
    sync
}

mkiso() {
    notice "making the dyneII ISO"
    echo "# Forged on `date` " \
    	| tee $PFX/cdrom/dyne/VERSION
    echo "# using `$MKISOFS --version` on `uname -srm`" \
    	| tee -a $PFX/cdrom/dyne/VERSION
    echo >> $PFX/cdrom/dyne/VERSION
    DYNE_SYS_VER="`cat /usr/etc/DYNEBOLIC`"
    echo "DYNE_SYS_VER=$DYNE_SYS_VER" | tee -a $PFX/cdrom/dyne/VERSION
#    echo "MD5: `md5sum $PFX/cdrom/dyne/dyne.sys`" | tee -a $PFX/cdrom/VERSION
#    echo >> $PFX/cdrom/VERSION
    DYNE_INITRD_VER="`cat /etc/DYNEBOLIC`"
    echo "DYNE_INITRD_VER=$DYNE_INITRD_VER" | tee -a $PFX/cdrom/dyne/VERSION
    if [ $SIGN ]; then
    # generate md5sum hashes and gpg signatures in separate files
      rm $PFX/cdrom/dyne/*.md5 2>/dev/null 1>/dev/null
      rm $PFX/cdrom/dyne/*.asc 2>/dev/null 1>/dev/null
      echo "please wait while generating md5 sums"
      md5sum $PFX/cdrom/dyne/dyne.sys > $PFX/cdrom/dyne/dyne.sys.md5
      md5sum $PFX/cdrom/dyne/initrd.gz > $PFX/cdrom/dyne/initrd.gz.md5
      echo "cryptographically signing the md5 sums"
      gpg $SIGN -b -a $PFX/cdrom/dyne/dyne.sys.md5
      gpg $SIGN -b -a $PFX/cdrom/dyne/initrd.gz.md5
    fi

    act "checking if the CDROM is complete"
    # the RAMDISK
    if ! [ -r $PFX/cdrom/dyne/initrd.gz ]; then
      act "ramdisk is missing, using the current one"
      cp -v ${DYNE_SYS_MNT}/dyne/initrd.gz ${PFX}/cdrom/dyne/
    fi
    # the USR SQUASHED SYSTEM
    if ! [ -r $PFX/cdrom/dyne/dyne.sys ]; then
      act "dyne.sys usr system is missing, using the current one"
      cp -v ${DYNE_SYS_MNT}/dyne/dyne.sys ${PFX}/cdrom/dyne/
    fi
    # the KERNEL
    if ! [ -r $PFX/cdrom/dyne/linux ]; then
      act "linux kernel is missing"
      SDK_KERNEL=`find ${PFX}/kernel -name "linux-${KRN}"`
      if [ -r $SDK_KERNEL/arch/`uname -i`/boot/bzImage ]; then
        act "using the kernel in SDK: $SDK_KERNEL"
        cp -v $SDK_KERNEL/arch/`uname -i`/boot/bzImage cdrom/dyne/linux
      elif [ -r ${DYNE_SYS_MNT}/dyne/linux ]; then
        act "using the kernel found in current dock"
        cp -v ${DYNE_SYS_MNT}/dyne/linux cdrom/dyne/linux
      else
        error "you're missing the kernel, provide one from a dyne CD"
        error "or compile one yourself, if you dare ;>"
        exit 0
      fi
    fi

    # purge subversion files in the cdrom
    for svn in `find $PFX/cdrom -name '.svn'`; do
      rm -rf ${svn}
    done

    ISO=dyne-${DYNE_SYS_VER}.iso
    act "proceeding to pack the ISO image $ISO"
    $MKISOFS -o $PFX/$ISO -J -R -udf \
            -b isolinux/isolinux.bin -c isolinux/boot.cat \
            -no-emul-boot -boot-load-size 4 -boot-info-table \
	    $PFX/cdrom/
    act "`stat $PFX/$ISO`"
    sync
}

########################################################################

case "$CMD" in
    # execute commands
    mksdk)    mksdk      ;;
    mount)    mountmods  ;;
    squash)   squash $@  ;;
    mkiso)    mkiso      ;;

    mkinitrd) mkinitrd ;;
    mkusr)    mkusr    ;;
    
    *) error "command \"$CMD\" not recognized"
esac

notice "bye."
exit 1
