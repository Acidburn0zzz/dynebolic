#!/bin/sh
#
# dyne:bolic software development kit - the commandline tool
#
# Copyright (C) 2003-2005 Denis "Jaromil" Rojo <jaromil@dyne.org>
#                    Alex "Smilzo" Gnoli    <smilzo@sfrajone.org>
#                    Pierluigi "Newmark" Maori <newmark@dyne.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published 
# by the Free Software Foundation; either version 2 of the License,
# or (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

if [ -r /lib/dyne/utils.sh ]; then
  source /lib/dyne/utils.sh
else
  # standard output message routines
  # it's always useful to wrap them, in case we change behaviour later
  notice() { echo "[*] $1"; }
  act() { echo " .  $1"; }
  error() { echo "[!] $1"; }
fi
func() { if [ $DEBUG ]; then echo "[D] $1"; fi }

PACKAGE="dyne:bolic SDK"
VERSION="2.0"
ISO="dynebolic-dev.iso"
PFX="/SDK" # you can change it to static path where dynesdk resides

notice "$PACKAGE version $VERSION - software development kit"
act "Copyleft 2003-2005 by jaromil - RASTASOFT.org"

OPTS=`getopt -o hvp:u:r:i:q -n 'dynesdk' -- "$@"`

#eval set -- "$OPTS"

while true; do
    case "$1" in
	-h)
	    notice "SYNOPSIS: dynesdk [-hv] [-p prefix] [-u user -h host] COMMAND"
	    act "-h     print this help"
	    act "-v     print out the version of this sdk tool"
	    act "-p     path to the sdk base directory (default /SDK)"
	    act "-u     username for online operations"
	    act "-r     server hosting the online sdk"
	    act "-i     dynebolic iso (default ./dynebolic-dev.iso)"
            act "-q     be quick and skip checksums and crypto sigs"

	    notice "COMMANDS:"
	    act "mkinitrd: makes an initrd.gz of INITRD_SIZE (8192KB)"
	    act "mkhome: packs the home into the cdrom directory"
	    act "mkvar: packs the var into the cdrom directory"
	    act "mksquash: packs the squashed filesystem in the cdrom"
	    act "mkiso: packs the cdrom directory into a bootable iso"

	    notice "right sequence:"
	    act "To create a working SDK the right sequence is the following: "
	    act "checkout    - to get the sdk from server"
	    act "mkiso       - to create the dynebolic-iso from the checkouted sdk"
	    act "explode     - to create the sdk exploded dir"
	    act "chroot      - to enter in dynebolic for developing"
	    act "commit      - when your are ABSOLUTELY SURE that it works"
	    echo; exit 2 ;;
	-v) exit 2 ;;
	-p) PFX=$2; shift 2 ;;
	-u) USER=$2; shift 2 ;;
	-i) ISO="$2"; shift 2 ;;
        -q) QUICK="yes"; shift 1 ;;
	--) shift; break ;;
	*)  CMD=$1; shift 1; break ;;
    esac
done

# function to check for required softwares
check_sw() {
    func "checking existance of $1"
    CHECK_SW="`which $1`"
    if [ -z $CHECK_SW ]; then
	error "$1 not found"
	RET=0
    else
	func "$1 found in $CHECK_SW"
	RET=$CHECK_SW
    fi
}

if [ "`whoami`" != root ]; then
    error "you must be ROOT on your machine to use dyne:bolic SDK"
    exit -1
fi

if [ ! -x "$PFX" ]; then
    error "the SDK directory is not existing"
    error "create the directory $PFX or set the -p option properly"
    exit 0
fi

# if those are missing, the iso can't be packed
if [ -z $MKISOFS ]; then
    check_sw "mkisofs";
    if [ $RET ]; then MKISOFS=$RET; fi
fi
if [ -z $MKSQUASHFS ]; then
    check_sw "mksquashfs";
    if [ $RET ]; then MKSQUASHFS=$RET; fi
fi


########################################################################
### MICRO COMMAND FUNCTIONS
########################################################################

mksdk() {
    if [ ! -x $PFX/cdrom ]; then
        act "creating SDK skeleton in $PFX"
	cp -ra /usr/share/dynebolic/cdrom "$PFX/"
    fi
    cd $PFX
    mkdir -p tmp initrd usr var home
    cd - > /dev/null
}

exinitrd() {
    act "generating initrd tree (please wait)"
    # TODO: controllare se l'initrd.gz esiste in cdrom
    gunzip $PFX/cdrom/dyne/initrd.gz
    mount -o loop -t ext2 $PFX/cdrom/dyne/initrd $PFX/tmp
    cp -r $PFX/tmp/* $PFX/initrd
    umount $PFX/tmp
    gzip -9 $PFX/cdrom/dyne/initrd
}

mkinitrd() {
    notice "making the initrd compressed filesystem"

    # create the directory if it's not there
    if [ ! -x $PFX/initrd ]; then
	mkdir -p $PFX/initrd
    fi
   
    # delete old contents
    if [ -r $PFX/initrd/etc/DYNEBOLIC ]; then
	rm -rf $PFX/initrd/*
    fi

    cd $PFX/initrd

    act "creating the ramdisk filesystem"
    cp -ra /etc .
    cp -ra /lib .
    cp -ra /bin .
    cp -ra /sbin .
    mkdir boot dev proc rem root sys tmp usr var vol mnt home
    touch /boot/dynenv

    act "cleaning up configs and logs"
    rm -f etc/X11/XF86Config
    rm -f etc/HOSTNAME etc/NETWORK
    rm -f etc/auto.removable

   
    if [ -x $PFX/startup/.svn ]; then
	act "setup startup files from subversion repository"
	cp -vf $PFX/startup/rc.*     etc/
	cp -vf $PFX/startup/zshenv   etc/
	cp -vf $PFX/startup/inittab  etc/
	cp -ravf $PFX/startup/zsh    etc/
        cp -ravf $PFX/startup/init.d etc/
	cp -ravf $PFX/startup/X11    etc/
	cp -ravf $PFX/startup/lib    lib/dyne
    fi

    ######## KERNEL MODULES
    if [ -z $KRN ]; then KRN=`uname -r`; fi
    act "setup boot kernel modules for ${KRN}"
    MODULES="fat,loop,msdos,ntfs,smbfs,ufs,vfat,befs"
    mkdir -p boot/modules/${KRN}
    for m in `iterate $MODULES`; do
	M=`find /usr/lib/modules/${KRN}/ -name "${m}.ko"`
	cp ${M} boot/modules/${KRN}/
        act ${M}
    done

    cd - > /dev/null
    cd $PFX

    #### COPY THE KERNEL
    ## this is not really inside the ramdisk initrd
    ## but we do it here
    if [ -r /boot/linux-${KRN} ]; then
      act "kernel found in /boot/linux-${KRN}"
      cp /boot/linux-${KRN} cdrom/dyne/linux
    else
      error "kernel linux-${KRN} not found in /boot"
    fi
	     
    act "generate device file"
    dd if=/dev/zero of=cdrom/dyne/initrd bs=1k count=9000
    act "formatting ramdisk filesystem"
    mke2fs -m 0 -i 1024 cdrom/dyne/initrd
    act "populating ramdisk static file"
    mount -o loop,rw cdrom/dyne/initrd tmp
    cp -ra initrd/* tmp
    rm -r tmp/lost+found
    umount tmp

    act "tuning filesystem"
    tune2fs -c 0 -i 0 cdrom/dyne/initrd
    rm -f cdrom/dyne/initrd.gz
    gzip -9 cdrom/dyne/initrd
    act "`stat cdrom/dyne/initrd.gz`"
    cd - > /dev/null
    sync
}

mkhome() {
    notice "packaging /home";
    cd $PFX/home
    cp -ra /home/luther/* .
    cp -ra /home/luther/.* .
    # todo
    rm -rf .mozilla
    rm -f  .ssh/known_*
    # touch to avoid errors on zsh host completion
    touch  .ssh/known_hosts
    cd - > /dev/null ; cd $PFX
    tar cfz cdrom/dyne/home.tgz home
    act "`stat $PFX/cdrom/dyne/home.tgz`"
    cd - > /dev/null ; sync
}

mkvar() {
    notice "packaging /var";
    cd $PFX/var
    cp -ra /var/* .
    rm -rf cache/*
    rm -rf lock/*
    rm -rf tmp/*
    rm -rf run/*
    rm -rf log/*
    mkdir log/hotplug log/login cache/samba
    cd - > /dev/null; cd $PFX
    tar cfz cdrom/dyne/var.tgz var
    act "`stat cdrom/dyne/var.tgz`"
    cd - > /dev/null; sync
}

mksquash() {
    notice "making the /usr squashed filesystem (please wait, takes long!)"
    act "start compressing: `date`"
    $MKSQUASHFS /usr $PFX/cdrom/dyne/dynebol.sys -noappend
    chmod -x $PFX/cdrom/dyne/dynebol.sys
    act "end: `date`"
    act "`stat $PFX/cdrom/dyne/dynebol.sys`"
    sync
}

mkiso() {
    notice "making the dynebolic ISO"
    cp -f `which $0` $PFX/cdrom/devel/
    echo "# Forged on `hostname`.`dnsdomainname` the `date` " | tee $PFX/cdrom/dyne/VERSION
    echo "# using `$MKISOFS --version` on `uname -srm`" | tee -a $PFX/cdrom/dyne/VERSION
    echo >> $PFX/cdrom/dyne/VERSION
    DYNE_SYS_VER="`cat /usr/etc/DYNEBOLIC`"
    echo "DYNE_SYS_VER=$DYNE_SYS_VER" | tee -a $PFX/cdrom/dyne/VERSION
#    echo "MD5: `md5sum $PFX/cdrom/dyne/dynebol.sys`" | tee -a $PFX/cdrom/VERSION
#    echo >> $PFX/cdrom/VERSION
    DYNE_INITRD_VER="`cat $PFX/initrd/etc/DYNEBOLIC`"
    echo "DYNE_INITRD_VER=$DYNE_INITRD_VER" | tee -a $PFX/cdrom/dyne/VERSION
    if [ -z $QUICK ]; then
    # generate md5sum hashes and gpg signatures in separate files
      rm $PFX/cdrom/dyne/*.md5 2>/dev/null 1>/dev/null
      rm $PFX/cdrom/dyne/*.asc 2>/dev/null 1>/dev/null
      echo "please wait while generating md5 sums"
      md5sum $PFX/cdrom/dyne/dynebol.sys > $PFX/cdrom/dyne/dynebol.sys.md5
      md5sum $PFX/cdrom/dyne/initrd.gz > $PFX/cdrom/dyne/initrd.gz.md5
      echo "cryptographically signing the md5 sums"
      gpg -b -a $PFX/cdrom/dyne/dynebol.sys.md5
      gpg -b -a $PFX/cdrom/dyne/initrd.gz.md5
    fi
    act "purging subversion files in the cdrom"
    for svn in `find $PFX/cdrom -name '.svn'`; do
      rm -rf ${svn}
    done
    act "proceeding to pack the ISO image"
    $MKISOFS -o $PFX/$ISO -J -R -udf \
            -b isolinux/isolinux.bin -c isolinux/boot.cat \
            -no-emul-boot -boot-load-size 4 -boot-info-table \
	    $PFX/cdrom/
    act "`stat $PFX/$ISO`"
    sync
}

mount_chroot() {
    notice "mount dyne:bolic SDK into a rw root cage"
    mount -o bind $PFX/initrd $PFX/chroot
    mount -o bind $PFX/usr $PFX/chroot/usr
    mount -o bind $PFX/cdrom $PFX/chroot/mnt/dynebolic
    mount -o bind $PFX/home $PFX/chroot/home
    mount -o bind $PFX/var $PFX/chroot/var
    mount /dev/shm
    mount -o bind /dev $PFX/chroot/dev
    mount -o bind /proc $PFX/chroot/proc
    mkdir /dev/shm/tmp
} 

umount_chroot() {
    notice "unmounting dyne:bolic SDK root cage"
    umount $PFX/chroot/proc
    umount $PFX/chroot/dev
    umount $PFX/chroot/var
    umount $PFX/chroot/home
    umount $PFX/chroot/mnt/dynebolic
    umount $PFX/chroot/usr
    umount $PFX/chroot
}

########################################################################




########################################################################
### MACRO COMMAND FUNCTIONS
########################################################################

explode() {
    notice "creating a dyne:bolic SDK in $PFX"
    if [ ! -x $PFX ]; then
       mkdir $PFX
       if [ $? != 0 ]; then
           error "cannot create directory $PFX"
	   exit -1
       fi
       # copy this script in the new SDK, if not present
       if [ ! -x "$PFX/$0" ]; then
           cp $0 $PFX
       fi
    fi
    
    # create SDK directory structure
    mkdir $PFX/tmp 2>/dev/null 1>/dev/null
    mkdir $PFX/usr 2>/dev/null 1>/dev/null
    mkdir $PFX/chroot 2>/dev/null 1>/dev/null

    if [ ! -e $PFX/cdrom/dyne/Linux ]; then    
      act "copying iso contents into $PFX/cdrom (please wait)"
      mkdir $PFX/cdrom 2>/dev/null 1>/dev/null
      mount -o loop,ro -t iso9660 $ISO $PFX/tmp
      cp -ar $PFX/tmp/* $PFX/cdrom/
      umount $PFX/tmp 
    else
      act "skipping cdrom/ creation (allready present)"
    fi
    
    exinitrd # create initrd/ from the compressed initrd.gz

    if [ ! -e $PFX/home/.xinitrc ]; then
      act "generating home tree"
      tar xfz $PFX/cdrom/dyne/home.tgz -C $PFX
    else
      act "skipping home/ creation (allready present)"
    fi
   
    if [ ! -e $PFX/var/log ]; then
      act "generating var tree"
      tar xfz $PFX/cdrom/dyne/var.tgz -C $PFX
    else
      act "skipping var/ creation (allready present)"
    fi

    if [ ! -e $PFX/usr/etc/DYNEBOLIC ]; then
      act "generating usr tree (please wait, this takes long!)"
      # TODO: check if kernel supports squashfs (mount fails)
      mount -o loop,ro -t squashfs $PFX/cdrom/dyne/dynebol.sys $PFX/tmp
      mkdir $PFX/usr 2>/dev/null 1>/dev/null
      cp -a $PFX/tmp/* $PFX/usr
      umount $PFX/tmp
    else
      act "skipping usr/ creation (allready present)"
    fi

    #TODO: generare dynebolic-sdk.cfg con i settaggi usati e detectati 
    notice "if you don't see errors above, the SDK has been generated!"
}

implode() {
    notice "imploding dyne:bolic SDK into a bootable ISO"
    mkinitrd; sync
    mkhome; sync
    mkvar; sync
    mksquash; sync
    mkiso; sync
}

chroot() {
   if [ ! -e $PFX/chroot/usr/bin/dynesplash -a \
          -e $PFX/.chroot_mounted ]; then
      rm $PFX/.chroot_mounted
   fi

   if [ ! -e $PFX/.chroot_mounted ]; then
      mount_chroot
      touch $PFX/.chroot_mounted
   fi
   notice "to dive into the dyne:bolic environment, just type:"
   act "# chroot $PFX/chroot /bin/zsh"
}

# to add some check asking

sdkcreate() {
	notice "Creating the dynebolic sdk in $PFX"
	act "-- going to checkout the dyne-sdk"
	checkout
	act "-- going to create the dyne-sdk iso in $PFX/$ISO"
	mkiso
	act "-- going to explode the sdk in $PFX"
	#mkdir $PFX/SDK 2>/dev/null 1>/dev/null
	explode
	act "-- going to delete the iso "
	rm -f $PFX/$ISO
	notice "dyne:bolic simple development kit ready"
}

# be sure the SDK skeleton is there
mksdk

case "$CMD" in
    # execute commands
    mkinitrd) mkinitrd ;;
    mkhome) mkhome ;;
    mkvar) mkvar ;;
    mksquash) mksquash ;;
    mkiso) mkiso ;;
    
    *) error "command \"$CMD\" not recognized"
esac

notice "bye."
exit 1
