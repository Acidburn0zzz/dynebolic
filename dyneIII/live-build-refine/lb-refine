#!/bin/zsh
#
# dyne:bolic software development kit
#
# Copyright (C) 2011 Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published 
# by the Free Software Foundation; either version 3 of the License,
# or (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

DEBUG=1
BINFILE=`basename $0`
BINPATH=`dirname $0`

autoload colors; colors


# standard output message routines
# it's always useful to wrap them, in case we change behaviour later
# standard output message routines
# it's always useful to wrap them, in case we change behaviour later
notice() { if ! [ $QUIET ]; then print "$fg_bold[green][*]$fg_no_bold[white] $1" >&2; fi }
error()  { if ! [ $QUIET ]; then print "$fg[red][!]$fg[white] $1" >&2; fi }
func()   { if [ $DEBUG ]; then   print "$fg[blue][D]$fg[white] $1" >&2; fi }
act()    {
    if ! [ $QUIET ]; then
	if [ "$1" = "-n" ]; then
	    print -n "$fg_bold[white] . $fg_no_bold[white] $2" >&2;
	else
	    print "$fg_bold[white] . $fg_no_bold[white] $1" >&2;
	fi
    fi
}

PACKAGE="dyne:OS SDK"
VERSION="3"

if [ $DYNESDK ]; then PFX=${DYNESDK}; fi

notice "$PACKAGE version $VERSION   Software Development Kit by \
$fg_bold[black]$bg[green]RAS$bg[yellow]TAS$bg[red]OFT$fg_no_bold[white]$bg[black]"
ARGS=$@[@]

# TODO
# CHECK FOR BINARIES:
# sudo, unsquashfs, Xephyr

OPTS=`getopt -o hvKp:o:s:m: -n 'dynesdk' -- "$@"`

while true; do
    case "$1" in
	-h)
	    notice "synopsis: $BINFILE [options] command [iso | dir]"
	    notice "commands:"
	    act "open   open up a livecd iso"
	    act "edit   edit an open livecd iso"
	    act "pack   squash an open livecd iso"
            notice "options:"
	    act "-h     print this help"
	    act "-v     print out the version of this tool"
#	    act "-p     path to the SDK directory (def. same as iso)"


	    echo; exit 2 ;;
	-v) exit 2 ;;
	-p) PFX=${2}; shift 2 ;;
	--) shift; break ;;
	*)  CMD=${1}; ARG1=${2}; ARG2=${3}; break ;;
    esac
done

act "$BINFILE $ARGS"

if ! [ $ARG1 ]; then
    # file is mandatory
    error "command or file missing, use -h for help."
    exit 1
fi

if [ -z $PFX ]; then 
    export PFX=`dirname $ARG1`;
fi
export FILE=`basename $ARG1`

## INTERNAL FUNCTIONS

# escalate privileges
check_priv() {
    if [ $UID != 0 ]; then
	func "Using sudo for root execution of '$BINFILE ${(f)ARGS}'"
	# check if sudo has a timestamp active
	sudok=false
	sudo -n ${BINPATH}/${BINFILE} 2> /dev/null
	if [ $? != 0 ]; then # if not then ask a password
	    cat <<EOF | pinentry 2>/dev/null | awk '/^D/ { print $2 }' | sudo -S -v
OPTION ttyname=$TTY
OPTION lc-ctype=$LANG
SETTITLE Super user privileges required
SETDESC Sudo execution of $BINFILE ${ARGS[@]}
SETPROMPT Insert your USER password:
GETPIN
EOF
	fi
	sudo "${BINPATH}/${BINFILE}" ${(s: :)ARGS}
	exit $?
    fi # are we root already
    return 0
}

loop_mount_iso() {
    
    file $1 | grep 'ISO.*filesystem' > /dev/null
    if [ $? != 0 ]; then
	error "$1 doesn't appear to be an ISO filesystem"
	return 1
    fi
    export ISOLOOP=$PFX/loop_${FILE%%\.*}

    mkdir -p $ISOLOOP

    mount -o loop $1 $ISOLOOP
    if [ $? != 0 ]; then
	error "cannot loop mount iso $dirname/$filename"
	act "trying to unmount..."
	umount $ISOLOOP
	if [ $? != 0 ]; then
	    error "errors reported loop mounting iso, operation aborted."
	    rmdir $ISOLOOP
	    return 1
	else
	    mount -o loop $1 $ISOLOOP
	    if [ $? != 0 ]; then
		error "cannot loop mount iso $dirname/$filename"
		rmdir $ISOLOOP
		return 1
	    fi
	fi
    fi

    act "loop mounted on $ISOLOOP"

}

########################################################################
### COMMAND FUNCTIONS
########################################################################

open_iso() {

    if ! [ -r $PFX/$FILE ]; then
	error "$PFX/$FILE not found"
	return 1
    fi

    dest=${PFX}/${FILE%%\.*}
    if [ -x $dest ]; then
	rmdir $dest 2>/dev/null # delete if empty
	if [ $? != 0 ]; then
	    error "SDK already contains an open ISO in $dest"
	    return 1
	fi
    fi

    notice "Opening $PFX/$FILE ..."

    loop_mount_iso # defines ISOLOOP, to be removed later

    if ! [ -x $ISOLOOP/live ]; then
	error "ISO doesn't contains a live/ directory, is this a live-build system?"
	rmdir $ISOLOOP
	return 1
    fi

    unsquashfs -d $dest $ISOLOOP/live/filesystem.squashfs
    if [ $? != 0 ]; then
	error "error unsquashing the live filesystem, operation aborted"
	umount $ISOLOOP
	rmdir $ISOLOOP
	if [ $? != 0 ]; then
	    error "please check and if necessary remove manually $dest"
	    return 1
	fi
    fi

    notice "`basename $dest` succesfully opened in $PFX"

    umount $ISOLOOP
    rmdir $ISOLOOP

    return 0
}

start_xephyr() {
    resolution=$1
    if ! [ $resolution ]; then
	resolution=1024x768
    fi

    pidof Xephyr
    if [ $? != 0 ]; then
	act "starting nested X screen using:"
	act "Xephyr -screen $resolution :1"
	Xephyr -screen $resolution :1 &!
    else
	error "Xephyr already running, operation aborted."
	return 1
    fi
    
    return 0
}

edit_iso() {

    start_xephyr $ARG2

    # bind dev and proc if needed
    mount | grep "$PFX/$FILE/dev/pts" > /dev/null
    if [ $? != 0 ]; then
	mount -o bind /dev/pts $PFX/$FILE/dev/pts
    fi
    mount | grep "$PFX/$FILE/proc" > /dev/null
    if [ $? != 0 ]; then
	mount -o bind /proc $PFX/$FILE/proc
    fi
    mount | grep "$PFX/$FILE/var/run" > /dev/null
    if [ $? != 0 ]; then
	mount -o bind /var/run $PFX/$FILE/var/run
    fi

    # mount | grep "$PFX/$FILE/tmp" > /dev/null
    # if [ $? != 0 ]; then
    # 	mount -o bind /tmp $PFX/$FILE/tmp
    # fi

    cp /etc/resolv.conf $PFX/$FILE/etc/resolv.conf
    notice "jumping into the live system"
    act "to launch the graphical session use:"
    act "export DISPLAY=localhost:0"
    act "xfce4-session (or what have you)"
    notice "now don't mind the error about fonts, but login with user and password"
    chroot $PFX/$FILE /bin/login

    killall Xephyr
    umount $PFX/$FILE/dev/pts
    umount $PFX/$FILE/proc
    umount $PFX/$FILE/var/run

    # umount $PFX/$FILE/tmp
}

pack_iso() {
    # check if its a filesystem
    if ! [ -x ${PFX}/${FILE}/usr ]; then
	error "${PFX}/${FILE} doesn't seems to be a filesystem"
	return 1
    fi

    notice "packing ${PFX}/${FILE}"

    # make sure nothing is mounted
    umount $PFX/$FILE/dev/pts 2> /dev/null
    umount $PFX/$FILE/proc  2>  /dev/null
    umount $PFX/$FILE/tmp 2>   /dev/null
    rm -f $PFX/$FILE/etc/resolv.conf
    echo "nameserver 8.8.8.8" \
	> $PFX/$FILE/etc/resolv.conf

    if ! [ -r $PFX/${FILE}.squashfs ]; then
	mksquashfs $PFX/$FILE $PFX/${FILE}.squashfs -noappend
	if [ $? != 0 ]; then
	    error "mksquash failed, operation aborted."
	    return 1
	fi
    else
	act "using existing $FILE.squashfs - delete it to force re-squashing."
    fi

    notice "succesfully packed $PFX/$FILE"
    act "`ls -lh $PFX/$FILE.squashfs`"
	# stat $PFX/$FILE.squashfs

    loop_mount_iso "$PFX/${FILE}.iso" # defines ISOLOOP, to be removed later
    if [ $? != 0 ]; then
	error "loop mount failed, operation aborted."
	return 1
    fi

    act "using iso image skeleton from $PFX/$FILE.iso"
    mount -o bind $PFX/$FILE.squashfs $ISOLOOP/live/filesystem.squashfs
    cp -ra $ISOLOOP/isolinux $PFX/isolinux_$FILE
    mount -o bind $PFX/isolinux_$FILE $ISOLOOP/isolinux

    # use new kernel and initrd inside /boot
    # warning: only one should be in boot, else ls will decide...
    kernel=`ls $PFX/$FILE/boot/vmlinuz* | head -n1`
    initrd=`ls $PFX/$FILE/boot/initrd* | head -n1`
    mount -o bind $kernel $ISOLOOP/live/vmlinuz
    mount -o bind $initrd $ISOLOOP/live/initrd.img

    isofile=$PFX/$FILE-`date +%s`.iso
    act "making bootable iso in $isofile"
    genisoimage -r -V "$FILE" -cache-inodes -J -l \
	-b isolinux/isolinux.bin -c isolinux/boot.cat \
	-no-emul-boot -boot-load-size 4 -boot-info-table \
	-input-charset iso8859-1 -udf -o $isofile $ISOLOOP
# omissis: -R -udf 
    if [ $? != 0 ]; then
	error "an error occurred in genisoimage, operation aborted."
	res=1
    else
	notice "iso file packed succesfully"
	ls -lh $isofile
	res=0
    fi

    # cleanup
    umount $ISOLOOP/live/filesystem.squashfs
    umount $ISOLOOP/live/vmlinuz
    umount $ISOLOOP/live/initrd.img

#    rm -f $PFX/$FILE.squashfs
    umount $ISOLOOP/isolinux
    rm -rf $PFX/isolinux_$FILE
    umount $ISOLOOP
    rmdir $ISOLOOP

    return $res
}
    
case "$CMD" in
    # execute commands
    open)    check_priv ; open_iso $@ ;;
    edit)    check_priv ; edit_iso $@ ;;
    pack)    check_priv ; pack_iso $@ ;;
    startx)  start_x $@ ;;
    *) error "command \"$CMD\" not recognized"
       act "try -h for help"
       exit 1
       ;;
esac

res=$?
if [ $res = 0 ]; then
    notice "operation successful."
fi
exit $res

