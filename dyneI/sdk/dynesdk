#!/bin/sh
#
# dyne:bolic software development kit - the commandline tool
#
# Copyright (C) 2003 Denis Rojo aka jaromil <jaromil@dyne.org>
#                    Alex Gnoli aka smilzo <smilzo@sfrajone.org>
#
# This source code is free software; you can redistribute it and/or
# modify it under the terms of the GNU Public License as published 
# by the Free Software Foundation; either version 2 of the License,
# or (at your option) any later version.
#
# This source code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

PACKAGE="dyne:bolic SDK"
VERSION="0.2"
ID="\$Id$"
REPOSITORY="rsync.dyne.org::dynebolic-dev --port 6969"

# standard output message routines
# always useful to wrap them, in case we change behaviour later
notice() { echo "[*] $1"; }
act() { echo " .  $1"; }
error() { echo "[!] $1"; }
func() { if [ $DEBUG ]; then echo "[D] $1"; fi }

notice "$PACKAGE version $VERSION - software development kit"
act "Copyleft 2003 by jaromil - http://dynebolic.org"
act "$ID"

OPTS=`getopt -o hvp:u:h: -n 'dynesdk' -- "$@"`

#eval set -- "$OPTS"

while true; do
    case "$1" in
	-h)
	    notice "SYNOPSIS: dynesdk [-hv] [-p prefix] [-u user -h host] COMMAND"
	    act "-h     print this help"
	    act "-v     print out the version of this sdk tool"
	    act "-p     path to the sdk base directory (default ./)"
	    act "-u     username for online operations"
	    act "-r     server hosting the online sdk"
	    notice "macro COMMANDS:"
	    act "checkout: download the sdk from an online server"
	    act "commit: uploads the current sdk to the server (be careful!)"
	    act "explode: opens an existing dyne:bolic iso into an SDK"
	    act "implode: packs a dyne:bolic iso from the current SDK"
	    act "chroot: dive inside the dyne:bolic SDK"
	    notice "micro COMMANDS:"
	    act "mkinitrd: makes an initrd.gz of INITRD_SIZE (6000)"
	    act "mkhome: packs the home into the cdrom directory"
	    act "mkvar: packs the var into the cdrom directory"
	    act "mksquash: packs the squashed filesystem in the cdrom"
	    act "mkiso: packs the cdrom directory into a bootable iso"
	    echo; exit 2 ;;
	-v) exit 2 ;;
	-p) PFX=$2; shift 2 ;;
	-u) USER=$2; shift 2 ;;
	-r) REPOSITORY="$2::dynebolic-dev --port 6969"; shift 2 ;;
	--) shift; break ;;
	*)  CMD=$1; shift 1; break ;;
    esac
done

# function to check for required softwares
check_sw() {
    func "checking existance of $1"
    CHECK_SW="`which $1`"
    if [ -z $CHECK_SW ]; then
	error "$1 not found"
	RET=0
    else
	func "$1 found in $CHECK_SW"
	RET=$CHECK_SW
    fi
}

if [ "`whoami`" != "root" ]; then
    error "you must be ROOT on your machine to use dyne:bolic SDK"
    exit -1
fi

if [ -r ./dynebolic-sdk.cfg ]; then
    source ./dynebolic-sdk.cfg
    PFX="./"
fi

if [ -z $PFX ]; then
    error "no SDK directory prefix configured yet, read the help"
    act "you just need to do it once, settings are then stored."
    exit 0
fi

# if this is missing, no development server can be accessed
if [ -z $RSYNC ]; then 
    check_sw "rsync";
    if [ $RET ]; then RSYNC=$RET; fi
fi
if [ -z $LYNX ]; then
    check_sw "lynx";
    if [ $RET ]; then LYNX=$RET; fi
fi
# if those are missing, the iso can't be packed
if [ -z $MKISOFS ]; then
    check_sw "mkisofs";
    if [ $RET ]; then MKISOFS=$RET; fi
fi
if [ -z $MKSQUASHFS ]; then
    check_sw "mksquashfs";
    if [ $RET ]; then MKSQUASHFS=$RET; fi
fi


########################################################################
### MACRO COMMAND FUNCTIONS
########################################################################

checkout() {
    notice "checkout from dyne:bolic main tree repository"
    act "this function connects online to download the development tree"
    act "access to the main tree repository is restricted to d:b developers"
    echo "---"
    if [ -z $USER ]; then
        echo "** ACCESS FOR DEVELOPERS ONLY! **"
        echo -n "User:"
        read -r USER
    fi 
    notice "logging into rsync daemon with user '$USER'"
    rsync -Parl $USER@$REPOSITORY $PFX
    echo "---"
}

commit() {
    notice "commit into dyne:bolic main tree repository"
    act "WARNING: USE THIS FUNCTION WITH EXTREME CAUTION"
    act "you are going to commit your changes in the main development tree"
    act "you are supposed to be coordinating with other developers in order"
    act "to NOT overwrite changes being done. RSYNC DOESN'T MERGES DIFFERENCES"
    act "you are warned, CURSES and BAD LUCK to you if you use this without"
    act "correctly coordinating with the rest of the developers."
    echo "---"
    if [ -z $USER ]; then
        echo "** ACCESS FOR DEVELOPERS ONLY! **"
        echo -n "User:"
        read -r USER
    fi
    notice "logging into rsync daemon with user '$USER'"
    rsync -Parl --delete $PFX/cdrom $USER@$REPOSITORY
    echo "---"
}

explode() {
    notice "creating a dyne:bolic SDK in $PFX"
    if [ ! -x $PFX ]; then
       mkdir $PFX
       if [ $? != 0 ]; then
           error "cannot create directory $PFX"
	   exit -1
       fi
    fi
    
    # create SDK directory structure
    mkdir $PFX/tmp 2>/dev/null 1>/dev/null
    mkdir $PFX/cdrom 2>/dev/null 1>/dev/null
    mkdir $PFX/initrd 2>/dev/null 1>/dev/null
    mkdir $PFX/usr 2>/dev/null 1>/dev/null
    mkdir $PFX/chroot 2>/dev/null 1>/dev/null
    
    # TODO indicare la iso da cui esplodere su linea di comando
    act "copying iso contents into $PFX/cdrom (please wait)"
    mount -o loop,ro -t iso9660 dynebolic-dev.iso $PFX/tmp
    cp -a $PFX/tmp/* $PFX/cdrom/
    umount $PFX/tmp 
    
    act "generating initrd tree (please wait)"
    gunzip $PFX/cdrom/isolinux/initrd.gz
    mount -o loop -t ext2 $PFX/cdrom/isolinux/initrd $PFX/tmp
    cp -a $PFX/tmp/* $PFX/initrd
    umount $PFX/tmp

    act "generating home tree"
    tar xfz $PFX/cdrom/home.tgz -C $PFX
    
    act "generating var tree"
    tar xfz $PFX/cdrom/var.tgz -C $PFX
    
    act "generating usr tree (please wait, this takes long!)"
    # TODO: check if kernel supports squashfs (mount fails)
    mount -o loop,ro -t squashfs $PFX/cdrom/squashedfs $PFX/tmp
    cp -a $PFX/tmp/* $PFX/usr
    umount $PFX/tmp

    #TODO: generare dynebolic-sdk.cfg con i settaggi usati e detectati 
    notice "if you don't see errors above, the SDK has been generated!"
}

implode() {
    notice "imploding dyne:bolic SDK into a bootable ISO"
    mkinitrd
    mkhome
    mkvar
    mksquash
    mkiso
}

chroot() {
   if [ ! -e $PFX/chroot/usr/bin/dynesplash -a \
          -e $PFX/.chroot_mounted ]; then
      rm $PFX/.chroot_mounted
   fi

   if [ ! -e $PFX/.chroot_mounted ]; then
      mount_chroot
      touch $PFX/.chroot_mounted
   fi
   notice "to dive into the dyne:bolic environment, just type:"
   act "# chroot $PFX/chroot /bin/zsh"
}

########################################################################
### MICRO COMMAND FUNCTIONS
########################################################################


mkinitrd() {
    notice "making the initrd compressed filesystem"
    rm -rf $PFX/initrd/tmp/*
    rm -f $PFX/initrd/etc/HOSTNAME $PFX/initrd/etc/NETWORK
    rm -f $PFX/initrd/etc/fstab
    rm -f $PFX/initrd/boot/Xok $PFX/initrd/boot/dynebol.log
    dd if=/dev/zero of=$PFX/cdrom/isolinux/initrd bs=1k count=6000
    mke2fs -m 0 -i 1024 $PFX/cdrom/isolinux/initrd
    mount -o loop,rw $PFX/cdrom/isolinux/initrd $PFX/tmp
    cp -a $PFX/initrd/* $PFX/tmp
    rm -r $PFX/tmp/lost+found
    umount $PFX/tmp
    tune2fs -c 0 -i 0 $PFX/cdrom/isolinux/initrd
    rm -f $PFX/cdrom/isolinux/initrd.gz
    gzip -9 $PFX/cdrom/isolinux/initrd
    act "`ls -lh $PFX/cdrom/isolinux/initrd.gz`"
}

mkhome() {
    notice "packaging /home";
    tar cfz $PFX/cdrom/home.tgz $PFX/home
    act "`ls -lh $PFX/cdrom/home.tgz`"
}

mkvar() {
    notice "packaging /var";
    tar cfz $PFX/cdrom/var.tgz $PFX/var
    act "`ls -lh $PFX/cdrom/var.tgz`"
}

mksquash() {
    notice "making the /usr squashed filesystem (please wait, takes long!)"
    act "start: `date`"
    $MKSQUASHFS $PFX/usr $PFX/cdrom/squashedfs -noappend
    chmod -x $PFX/cdrom/squashedfs
    act "end: `date`"
    act "`ls -lh $PFX/cdrom/squashedfs`"
}

mkiso() {
    notice "making the dynebolic ISO"
    $MKISOFS -o $PFX/dynebolic-dev.iso -J -R -udf \
            -b isolinux/isolinux.bin -c isolinux/boot.cat \
            -no-emul-boot -boot-load-size 4 -boot-info-table \
	    $PFX/cdrom/
    act "`ls -lh $PFX/dynebolic-dev.iso`"
}

mount_chroot() {
    notice "mount dyne:bolic SDK into a rw root cage"
    mount -o bind $PFX/initrd $PFX/chroot
    mount -o bind $PFX/usr $PFX/chroot/usr
    mount -o bind $PFX/cdrom $PFX/chroot/mnt/dynebolic
    mount -o bind $PFX/home $PFX/chroot/home
    mount -o bind $PFX/var $PFX/chroot/var
    mount /dev/shm
    mount -o bind /dev $PFX/chroot/dev
    mount -o bind /proc $PFX/chroot/proc
    mkdir /dev/shm/tmp
} 

umount_chroot() {
    notice "unmounting dyne:bolic SDK root cage"
    umount $PFX/chroot/proc
    umount $PFX/chroot/dev
    umount $PFX/chroot/var
    umount $PFX/chroot/home
    umount $PFX/chroot/mnt/dynebolic
    umount $PFX/chroot/usr
    umount $PFX/chroot
}

########################################################################


case "$CMD" in
    # macro commands
    checkout) checkout ;;
    commit) commit ;;
    explode) explode ;;
    implode) implode ;;
    chroot) chroot ;;
    # micro commands
    mkinitrd) mkinitrd ;;
    mkhome) mkhome ;;
    mkvar) mkvar ;;
    mksquash) mksquash ;;
    mkiso) mkiso ;;
    
    *) error "command \"$CMD\" not recognized"
esac

notice "bye."
exit 1
